import React, {useEffect, useState} from "react";
import { format, parse, startOfWeek, getDay } from 'date-fns';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { supabase } from '../src/supabaseClient';
import HamburgerMenu from "../components/HamburgerMenu"

const locales = {
  'en-US': require('date-fns/locale/en-US'),
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek: () => startOfWeek(new Date(), { weekStartsOn: 0 }),
  getDay,
  locales,
});

type CalendarEvent = {
  id: string;
  title: string;
  start: Date;
  end: Date;
  notes?: string;
};



function History() {
 const [events, setEvents] = useState<CalendarEvent[]>([]);
 const [currentDate, setCurrentDate] = useState(new Date());
 const [currentView, setCurrentView] = useState<View>('month'); // 'month' | 'week' | 'day' | 'agenda'


  useEffect(() => {
    const fetchSessions = async () => {
      const { data, error } = await supabase
        .from('practice_sessions')
        .select('id, date, duration_minutes, notes');

      if (error) {
        console.error('Error fetching sessions:', error);
        return;
      }

      const formatted = data.map((session) => {
        //const start = new Date(session.date);
        //const end = new Date(start.getTime() + session.duration_minutes * 60000);

        return {
          id: session.id,
          title: `${session.duration_minutes} min` || 'Practice Session',
          start: new Date(session.date),
          end: new Date(session.date),
          notes: session.notes || '',
        };
      });

      setEvents(formatted);
    };

    fetchSessions();
  }, []);


  const handleEventClick = (event: any) => {
    alert(`You clicked on: ${event.title}`);
    // Or you could: open a modal, navigate, etc.
  };

  const handleSelectSlot = async (slotInfo: SlotInfo) => {
    const { data: { user } } = await supabase.auth.getUser();
    const title = prompt("Enter duration: ");
    const notes = prompt('Add notes (optional)');

    if (!title) return;

    const newEvent = {
      date: slotInfo.start.toISOString().split("T")[0],
      duration_minutes: title,
      notes: notes || null,
    };

    const { data, error } = await supabase
    .from('practice_sessions')
    .insert([newEvent]);

    if (error) {
      alert('Error adding event: ' + error.message);
      console.error(error);
      console.log(data)
    } else if (data && data.length > 0) {
      console.log("In here?")
      const session = data[0];
      const start = new Date(session.date);
      const end = new Date(session.date);

      const insertedEvent: CalendarEvent = {
        id: session.id,
        title: `${session.duration_minutes} min`,
        start,
        end,
        notes: session.notes || '',
      };
      setEvents((prev) => [...prev, insertedEvent]);
      alert('Event added successfully!');
    }


  }


  return (
    <div style={{ padding: '2rem' }}>
      <div>
        <HamburgerMenu />
      </div>
      <h2>Practice History</h2>
      <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        titleAccessor="title"
        onSelectEvent={handleEventClick}
        date={currentDate} // <- controlled date
        onNavigate={(newDate) => setCurrentDate(newDate)}
        selectable={true}
        onSelectSlot={handleSelectSlot}
        onView={(view) => setCurrentView(view)}
        eventPropGetter={(event => ({
          style: {
            backgroundColor: 'white',
            color: 'black',
            fontSize: '1rem',       // increase font size
            padding: '6px 8px',     // add padding inside event box
            whiteSpace: 'normal',   // allow multiline titles
            overflow: 'visible',    // avoid text clipping
          }
        }))}
        style={{ height: 600, marginTop: '2rem', cursor: 'pointer' }}
      />
    </div>
  );
};

export default History; 